package ui

import (
	"fmt"
	"videofetch/internal/download"
)

// Dashboard renders the full HTML page containing the enqueue form
// and the queue table which updates via HTMX polling.
templ Dashboard(items []*download.Item) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<title>VideoFetch Dashboard</title>
			<link rel="icon" type="image/x-icon" href="/static/App.ico"/>
			<link rel="icon" type="image/png" sizes="32x32" href="/static/png/web/favicon-32.png"/>
			<link rel="icon" type="image/png" sizes="16x16" href="/static/png/web/favicon-16.png"/>
			<link rel="apple-touch-icon" sizes="180x180" href="/static/png/web/apple-touch-icon-180.png"/>
			<script src="https://unpkg.com/htmx.org@1.9.12" integrity="sha384-ujb1lZYygJmzgSwoxRggbCHcjc0rB2XoQrxeTUQyRjrOnlCoYta87iKBWq3EsdM2" crossorigin="anonymous"></script>
			<link rel="stylesheet" href="/static/style.css"/>
			<script>
                // HTMX error handling to gracefully handle server disconnections
                document.addEventListener('DOMContentLoaded', function() {
                    let errorCount = 0;
                    let maxErrors = 3;
                    let isServerDown = false;
                    let currentInterval = 1; // seconds
                    const originalInterval = 1;
                    const maxInterval = 30;

                    function updatePollingInterval(intervalSeconds) {
                        const queueDiv = document.getElementById('queue');
                        if (queueDiv && !isServerDown) {
                            queueDiv.setAttribute('hx-trigger', `load, every ${intervalSeconds}s, refresh`);
                            htmx.process(queueDiv); // Reprocess to apply new trigger
                        }
                    }

                    document.body.addEventListener('htmx:sendError', function(evt) {
                        errorCount++;
                        console.log(`HTMX request failed (${errorCount}/${maxErrors}):`, evt.detail);

                        if (errorCount >= maxErrors && !isServerDown) {
                            isServerDown = true;
                            // Stop polling and show error message
                            const queueDiv = document.getElementById('queue');
                            if (queueDiv) {
                                queueDiv.removeAttribute('hx-trigger');
                                queueDiv.innerHTML = '<div class="text-red-600 text-center p-4">⚠️ Lost connection to server. Please refresh the page when server is back online.</div>';
                            }
                            console.log('Server appears to be down. Stopped polling.');
                        } else if (errorCount > 0 && !isServerDown) {
                            // Implement exponential backoff
                            currentInterval = Math.min(currentInterval * 2, maxInterval);
                            updatePollingInterval(currentInterval);
                            console.log(`Increased polling interval to ${currentInterval}s due to errors`);
                        }
                    });

                    document.body.addEventListener('htmx:afterRequest', function(evt) {
                        // Reset error count and interval on successful request
                        if (evt.detail.successful) {
                            if (errorCount > 0) {
                                errorCount = 0;
                                currentInterval = originalInterval;
                                updatePollingInterval(currentInterval);
                                console.log('Connection restored, reset polling to normal interval');
                            }
                            if (isServerDown) {
                                isServerDown = false;
                                location.reload(); // Reload to restore normal functionality
                            }
                        }
                    });

                    document.body.addEventListener('htmx:responseError', function(evt) {
                        if (evt.detail.xhr.status === 0) {
                            // Connection error (server down)
                            errorCount++;
                        }
                    });

                    // Update progress bars from data attributes
                    function updateProgressBars() {
                        document.querySelectorAll('.bar[data-progress]').forEach(function(bar) {
                            const progress = bar.getAttribute('data-progress');
                            bar.style.width = progress + '%';
                        });
                    }

                    // Update progress bars on load and after HTMX requests
                    updateProgressBars();
                    document.body.addEventListener('htmx:afterSwap', updateProgressBars);
                });
            </script>
		</head>
		<body class="max-w-5xl mx-auto p-4">
			<h1 class="text-2xl font-semibold mb-4">VideoFetch Dashboard</h1>
			<form hx-post="/dashboard/enqueue" hx-target="#enqueue-status" hx-swap="innerHTML" class="flex gap-2 mb-3">
				<input type="url" name="url" placeholder="https://example.com/video" required class="flex-1 border rounded px-3 py-2"/>
				<button type="submit" class="px-3 py-2 rounded bg-indigo-600 text-white hover:bg-indigo-500" hx-indicator="#loading">Enqueue</button>
			</form>
			<div id="enqueue-status" class="mb-3"></div>
			<div id="remove-status" class="mb-3"></div>
			<div id="retry-status" class="mb-3"></div>
			<div id="loading" class="htmx-indicator text-sm text-gray-600">Enqueueing...</div>
			<form id="controls-form" class="flex gap-4 items-center text-sm mb-4" hx-get="/dashboard/rows" hx-target="#queue" hx-trigger="change" hx-swap="innerHTML">
				<label class="text-gray-600 dark:text-gray-300">
					Status:
					<select name="status" class="border border-gray-300 rounded px-2 py-1 ml-2 text-gray-900">
						<option value="">All</option>
						<option value="queued">Queued</option>
						<option value="downloading">Downloading</option>
						<option value="completed">Completed</option>
						<option value="failed">Failed</option>
					</select>
				</label>
				<label class="text-gray-600 dark:text-gray-300">
					Sort:
					<select name="sort" class="border border-gray-300 rounded px-2 py-1 ml-2 text-gray-900">
						<option value="">Default</option>
						<option value="date">Date</option>
						<option value="status">Status</option>
						<option value="title">Title</option>
						<option value="progress">Progress</option>
					</select>
				</label>
				<label class="text-gray-600 dark:text-gray-300">
					Order:
					<select name="order" class="border border-gray-300 rounded px-2 py-1 ml-2 text-gray-900">
						<option value="desc">Desc</option>
						<option value="asc">Asc</option>
					</select>
				</label>
				<button
					hx-post="/dashboard/retry_failed"
					hx-target="#retry-status"
					hx-swap="innerHTML"
					class="px-3 py-1 rounded bg-yellow-600 text-white hover:bg-yellow-500 text-sm"
					hx-confirm="Are you sure you want to retry all failed downloads?"
				>
					Retry Failed Downloads
				</button>
			</form>
			<div id="queue" hx-get="/dashboard/rows" hx-trigger="load, every 1s, refresh" hx-include="#controls-form" hx-target="#queue" hx-swap="innerHTML">
				@QueueTable(items)
			</div>
		</body>
	</html>
}

// QueueTable renders a full table from the items.
templ QueueTable(items []*download.Item) {
	<table class="w-full border-collapse">
		<thead>
			<tr>
				<th class="text-left p-2 border-b border-gray-200">Thumb</th>
				<th class="text-left p-2 border-b border-gray-200">Title</th>
				<th class="text-left p-2 border-b border-gray-200">URL</th>
				<th class="text-left p-2 border-b border-gray-200">Status</th>
				<th class="text-left p-2 border-b border-gray-200">Duration</th>
				<th class="text-left p-2 border-b border-gray-200">Progress</th>
				<th class="text-left p-2 border-b border-gray-200">Error</th>
				<th class="text-left p-2 border-b border-gray-200">Actions</th>
			</tr>
		</thead>
		<tbody id="queue-table-body">
			@QueueRows(items)
		</tbody>
	</table>
}

// QueueRows renders the table rows only; used by HTMX polling endpoint.
templ QueueRows(items []*download.Item) {
	for _, it := range items {
		<tr class="hover:bg-gray-50 dark:hover:bg-gray-800">
			<td class="p-2 border-b border-gray-200 align-middle">
				if it.ThumbnailURL != "" {
					<img src={ it.ThumbnailURL } alt="thumb" class="w-16 h-auto rounded"/>
				}
			</td>
			<td class="p-2 border-b border-gray-200 align-middle">
				if it.Title != "" {
					{ it.Title }
				} else {
					{ it.URL }
				}
			</td>
			<td class="p-2 border-b border-gray-200 align-middle"><a href={ it.URL } target="_blank" rel="noreferrer" class="text-blue-600 hover:text-blue-800">{ it.URL }</a></td>
			<td class="p-2 border-b border-gray-200 align-middle">
				if it.State == download.StateQueued {
					<span class="badge queued">queued</span>
				} else if it.State == download.StateDownloading {
					<span class="badge downloading">downloading</span>
				} else if it.State == download.StateCompleted {
					<span class="badge completed">completed</span>
				} else if it.State == download.StateFailed {
					<span class="badge failed">failed</span>
				}
			</td>
			<td class="p-2 border-b border-gray-200 align-middle">
				if it.Duration > 0 {
					{ fmt.Sprintf("%dm%02ds", it.Duration/60, it.Duration%60) }
				}
			</td>
			<td class="p-2 border-b border-gray-200 align-middle">
				<div class="progress"><div class="bar" data-progress={ fmt.Sprintf("%.1f", it.Progress) }></div></div>
				<span class="pct">{ fmt.Sprintf("%.1f%%", it.Progress) }</span>
			</td>
			<td class="p-2 border-b border-gray-200 align-middle">
				if it.Error != "" {
					<span class="err">{ it.Error }</span>
				}
			</td>
			<td class="p-2 border-b border-gray-200 align-middle">
				<div class="flex gap-2">
					if it.State == download.StateCompleted && it.Filename != "" {
						<a
							href={ templ.SafeURL("/api/download_file?id=" + it.ID) }
							class="action-btn download-btn"
							title="Download file"
						>
							📥
						</a>
					}
					if it.State != download.StateDownloading {
						<form
							hx-post="/dashboard/remove"
							hx-target="#remove-status"
							hx-swap="innerHTML"
							class="inline-form"
						>
							<input type="hidden" name="id" value={ it.ID }/>
							<button
								type="submit"
								class="action-btn remove-btn"
								title="Remove from database"
								hx-confirm="Are you sure you want to remove this item?"
							>
								🗑️
							</button>
						</form>
					} else {
						<button
							class="action-btn remove-btn disabled"
							title="Cannot remove while downloading"
							disabled
						>
							🗑️
						</button>
					}
				</div>
			</td>
		</tr>
	}
}

// DashboardLCARS renders the full HTML page containing the enqueue form
// and the queue table in LCARS style
templ DashboardLCARS(items []*download.Item) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<title>VideoFetch LCARS Interface</title>
			<link rel="icon" type="image/x-icon" href="/static/App.ico"/>
			<script src="https://unpkg.com/htmx.org@1.9.12" integrity="sha384-ujb1lZYygJmzgSwoxRggbCHcjc0rB2XoQrxeTUQyRjrOnlCoYta87iKBWq3EsdM2" crossorigin="anonymous"></script>
			<!-- Tailwind build (utilities + project styles) -->
			<link rel="stylesheet" href="/static/style.css"/>
			<!-- LCARS structural styles (elbows/bars/units) -->
			<link rel="stylesheet" href="/static/lcars.css"/>
			<script src="/static/lcars_audio.js"></script>
			<script>
                // HTMX error handling
                document.addEventListener('DOMContentLoaded', function() {
                    let errorCount = 0;
                    let maxErrors = 3;
                    let isServerDown = false;
                    let currentInterval = 1;
                    const originalInterval = 1;
                    const maxInterval = 30;

                    function updatePollingInterval(intervalSeconds) {
                        const queueDiv = document.getElementById('queue');
                        if (queueDiv && !isServerDown) {
                            queueDiv.setAttribute('hx-trigger', `load, every ${intervalSeconds}s, refresh`);
                            htmx.process(queueDiv);
                        }
                    }

                    document.body.addEventListener('htmx:sendError', function(evt) {
                        errorCount++;
                        console.log(`HTMX request failed (${errorCount}/${maxErrors}):`, evt.detail);

                        if (errorCount >= maxErrors && !isServerDown) {
                            isServerDown = true;
                            const queueDiv = document.getElementById('queue');
                            if (queueDiv) {
                                queueDiv.removeAttribute('hx-trigger');
                                queueDiv.innerHTML = '<div class="flex items-center justify-center h-full min-h-[300px]"><div class="bg-[#cc6677] text-white p-6 border-2 border-[#ff6677] rounded-lg text-center max-w-md"><div class="text-[18px] font-bold mb-2">⚠️ CONNECTION TO STARFLEET COMMAND LOST</div><div class="text-[14px] opacity-90">COMMUNICATION ARRAY OFFLINE - REFRESH WHEN CONNECTION RESTORED</div></div></div>';
                            }
                        } else if (errorCount > 0 && !isServerDown) {
                            currentInterval = Math.min(currentInterval * 2, maxInterval);
                            updatePollingInterval(currentInterval);
                        }
                    });

                    document.body.addEventListener('htmx:afterRequest', function(evt) {
                        if (evt.detail.successful) {
                            if (errorCount > 0) {
                                errorCount = 0;
                                currentInterval = originalInterval;
                                updatePollingInterval(currentInterval);
                            }
                            if (isServerDown) {
                                isServerDown = false;
                                location.reload();
                            }
                        }
                    });

                    // Update progress bars from data attributes
                    function updateProgressBars() {
                        document.querySelectorAll('.progress-bar[data-progress]').forEach(function(bar) {
                            const progress = bar.getAttribute('data-progress');
                            bar.style.width = progress + '%';
                        });
                    }

                    // Update progress bars on load and after HTMX requests
                    updateProgressBars();
                    document.body.addEventListener('htmx:afterSwap', updateProgressBars);
                });
            </script>
		</head>
		<body class="m-0 p-0 bg-black text-[#FFFF99] overflow-x-hidden h-screen">
			<div class="lcars-app-container">
				<!-- HEADER -->
				<div id="header" class="lcars-row header">
					<div class="lcars-elbow left-bottom lcars-golden-tanoi-bg"></div>
					<div class="lcars-bar horizontal">
						<div class="lcars-title right">VIDEOFETCH COMMAND INTERFACE</div>
					</div>
					<div class="lcars-bar horizontal right-end decorated"></div>
				</div>
				<!-- SIDE MENU -->
				<div id="left-menu" class="lcars-column start-space lcars-u-1">
					<div class="lcars-element button lcars-chestnut-rose-bg mb-1">MAIN OPS</div>
					<div class="lcars-element button lcars-pale-canary-bg mb-1">QUEUE</div>
					<div class="lcars-element button mb-1">DOWNLOADS</div>
					<div class="lcars-element button mb-1">STATUS</div>
					<div class="lcars-element button mb-1">SETTINGS</div>
					<a href="/dashboard" class="no-underline text-current"><div class="lcars-element button lcars-lavender-purple-bg mb-1">CLASSIC UI</div></a>
					<div class="lcars-bar lcars-u-1 flex-grow"></div>
				</div>
				<!-- FOOTER -->
				<div id="footer" class="lcars-row">
					<div class="lcars-elbow left-top lcars-golden-tanoi-bg"></div>
					<div class="lcars-bar horizontal both-divider bottom"></div>
					<div class="lcars-bar horizontal right-end left-divider bottom"></div>
				</div>
				<!-- MAIN CONTAINER -->
				<div id="container" class="flex-1 flex flex-col p-4 gap-4 ml-[200px] mt-20 mb-20 overflow-y-auto">
					<!-- URL INPUT SECTION -->
					<div class="lcars-input-section bg-neutral-900 border-2 border-[#FFCC99] p-4 rounded-lg">
						<div class="w-full mb-3 text-[#FFCC99] text-[16px] font-bold whitespace-nowrap overflow-hidden text-ellipsis">MEDIA ACQUISITION PROTOCOL</div>
						<form hx-post="/dashboard-lcars/enqueue" hx-target="#enqueue-status" hx-swap="innerHTML" class="flex gap-3 items-center">
							<input type="url" name="url" placeholder="ENTER MEDIA RESOURCE LOCATOR" required class="flex-1 p-3 text-[14px] bg-black text-[#FFCC99] border border-[#FFCC99] rounded"/>
							<button type="submit" class="lcars-element button lcars-atomic-tangerine-bg px-5 py-3 cursor-pointer font-bold rounded">ENGAGE</button>
						</form>
						<div id="enqueue-status" class="my-2 p-2 rounded border border-[#FFCC99] text-xs bg-[#FFCC99]/10 hidden"></div>
						<div id="remove-status" class="my-2 p-2 rounded border border-[#FFCC99] text-xs bg-[#FFCC99]/10 hidden"></div>
						<div id="retry-status" class="my-2 p-2 rounded border border-[#FFCC99] text-xs bg-[#FFCC99]/10 hidden"></div>
					</div>
					<!-- CONTROLS SECTION -->
					<div class="lcars-controls-section bg-black border-2 border-[#99CCFF] p-3 rounded-lg">
						<form id="controls-form" hx-get="/dashboard-lcars/rows" hx-target="#queue" hx-trigger="change" hx-swap="innerHTML" class="flex gap-4 justify-between">
							<div class="lcars-text-box text-[#99CCFF]  font-bold">FILTER CONTROLS:</div>
							<div class="flex gap-4 justify-items-end">
								<button
									hx-post="/dashboard-lcars/retry_failed"
									hx-target="#retry-status"
									hx-swap="innerHTML"
									class="lcars-element button lcars-chestnut-rose-bg min-w-fit leading-relaxed px-4 py-2 cursor-pointer font-bold rounded text-white"
									hx-confirm="CONFIRM RETRY ALL FAILED DOWNLOADS?"
								>
									RETRY FAILED
								</button>
								<label class="flex items-center gap-2">
									<span class="text-[#99CCFF] font-bold">STATUS:</span>
									<select name="status" class="p-1 bg-black text-[#99CCFF] border border-[#99CCFF] rounded">
										<option value="">ALL</option>
										<option value="queued">QUEUED</option>
										<option value="downloading">DOWNLOADING</option>
										<option value="completed">COMPLETED</option>
										<option value="failed">FAILED</option>
									</select>
								</label>
								<label class="flex items-center gap-2">
									<span class="text-[#99CCFF] font-bold">SORT:</span>
									<select name="sort" class="p-1 bg-black text-[#99CCFF] border border-[#99CCFF] rounded">
										<option value="">DEFAULT</option>
										<option value="date">DATE</option>
										<option value="status">STATUS</option>
										<option value="title">TITLE</option>
										<option value="progress">PROGRESS</option>
									</select>
								</label>
								<label class="flex items-center gap-2">
									<span class="text-[#99CCFF] font-bold">ORDER:</span>
									<select name="order" class="p-1 bg-black text-[#99CCFF] border border-[#99CCFF] rounded">
										<option value="desc">DESC</option>
										<option value="asc">ASC</option>
									</select>
								</label>
							</div>
						</form>
					</div>
					<!-- QUEUE DISPLAY -->
					<div class="lcars-queue-section flex-1 bg-neutral-900 border-2 border-[#99FFCC] rounded-lg overflow-hidden flex flex-col">
						<div class="p-4 bg-neutral-800 border-b border-[#99FFCC]">
							<div class="w-full text-[#99FFCC] text-[18px] font-bold m-0 whitespace-nowrap overflow-hidden text-ellipsis">DOWNLOAD QUEUE STATUS</div>
						</div>
						<div id="queue" hx-get="/dashboard-lcars/rows" hx-trigger="load, every 1s, refresh" hx-include="#controls-form" hx-target="#queue" hx-swap="innerHTML" class="flex-1 overflow-y-auto p-4">
							@QueueTableLCARS(items)
						</div>
					</div>
				</div>
			</div>
			<audio id="audDummy"></audio>
		</body>
	</html>
}

// QueueTableLCARS renders the queue in LCARS style
templ QueueTableLCARS(items []*download.Item) {
	if len(items) == 0 {
		<div class="text-center p-8 text-[#CCCCCC]">
			<div class="lcars-text-box large">NO ACTIVE DOWNLOADS</div>
			<div class="mt-2 text-[12px]">QUEUE IS EMPTY</div>
		</div>
	} else {
		<div class="flex flex-col gap-[6px]">
			for _, it := range items {
				@QueueRowLCARS(it)
			}
		</div>
	}
}

// QueueRowLCARS renders a single queue item in LCARS style
templ QueueRowLCARS(it *download.Item) {
	<div class="mb-3 border-2 border-[#666666] bg-black/90 rounded-lg hover:border-[#FFCC99] transition-colors">
		<div class="p-4 flex gap-4 items-start">
			<!-- Thumbnail -->
			<div class="w-[90px] h-[68px] flex items-center justify-center bg-neutral-800 border border-neutral-600 rounded-md overflow-hidden">
				if it.ThumbnailURL != "" {
					<img src={ it.ThumbnailURL } alt="thumb" class="max-w-[88px] max-h-[66px] object-cover rounded"/>
				} else {
					<div class="text-[#666] text-[10px] text-center">NO<br/>IMAGE</div>
				}
			</div>
			<!-- Main Content -->
			<div class="flex-1 min-w-0">
				<div class="font-bold text-[15px] mb-[6px] text-[#FFCC99] whitespace-nowrap overflow-hidden text-ellipsis leading-[1.2]">
					if it.Title != "" {
						{ it.Title }
					} else {
						{ it.URL }
					}
				</div>
				<div class="text-[11px] text-[#999] mb-2 whitespace-nowrap overflow-hidden text-ellipsis">
					<a href={ it.URL } target="_blank" rel="noreferrer" class="text-[#999] no-underline">{ it.URL }</a>
				</div>
				<!-- Progress Bar -->
				<div class="bg-neutral-800 h-3 border border-neutral-600 rounded-md overflow-hidden">
					<div class="h-full bg-gradient-to-r from-[#FFCC99] to-[#FF9966] transition-all progress-bar" data-progress={ fmt.Sprintf("%.1f", it.Progress) }></div>
				</div>
				<div class="text-[12px] text-[#CCC] mt-[6px] font-bold">
					{ fmt.Sprintf("%.1f%%", it.Progress) } COMPLETE
					if it.Duration > 0 {
						<span class="ml-3">DURATION: { fmt.Sprintf("%dm%02ds", it.Duration/60, it.Duration%60) }</span>
					}
				</div>
				if it.Error != "" {
					<div class="bg-[#cc6677] text-white p-1 mt-[6px] text-[10px] border border-[#ff9999] rounded">
						ERROR: { it.Error }
					</div>
				}
			</div>
			<!-- Status and Actions -->
			<div class="flex flex-col gap-[6px] min-w-[90px] items-stretch">
				<!-- Status Badge -->
				if it.State == download.StateQueued {
					<div class="px-2 py-2 bg-[#FFCC99] text-black text-[11px] font-bold text-center rounded border border-[#FFCC99]">QUEUED</div>
				} else if it.State == download.StateDownloading {
					<div class="px-2 py-2 bg-[#99CCFF] text-black text-[11px] font-bold text-center rounded border border-[#99CCFF]">ACTIVE</div>
				} else if it.State == download.StateCompleted {
					<div class="px-2 py-2 bg-[#99CC99] text-black text-[11px] font-bold text-center rounded border border-[#99CC99]">COMPLETE</div>
				} else if it.State == download.StateFailed {
					<div class="px-2 py-2 bg-[#cc6677] text-white text-[11px] font-bold text-center rounded border border-[#cc6677]">FAILED</div>
				} else {
					<div class="px-2 py-2 bg-[#666666] text-[#999999] text-[11px] font-bold text-center rounded border border-[#666666]">UNKNOWN</div>
				}
				<!-- Actions -->
				if it.State == download.StateCompleted && it.Filename != "" {
					<a href={ templ.SafeURL("/api/download_file?id=" + it.ID) } class="px-2 py-2 button lcars-lavender-purple-bg lcars-atomic-tangerine-bg text-black no-underline text-[10px] font-bold text-center rounded border transition-colors">RETRIEVE</a>
				}
				if it.State != download.StateDownloading {
					<form hx-post="/dashboard-lcars/remove" hx-target="#remove-status" hx-swap="innerHTML" class="block">
						<input type="hidden" name="id" value={ it.ID }/>
						<button type="submit" class="w-full px-2 py-2 bg-[#cc6677] text-white border border-[#cc6677] cursor-pointer text-[10px] font-bold rounded transition-colors" hx-confirm="CONFIRM DELETION OF THIS RECORD?">PURGE</button>
					</form>
				} else {
					<div class="px-2 py-2 bg-[#333333] text-[#666666] text-[10px] font-bold text-center rounded border border-[#333333]">LOCKED</div>
				}
			</div>
		</div>
	</div>
}
