package ui

import (
    "fmt"
    "videofetch/internal/download"
)

// Dashboard renders the full HTML page containing the enqueue form
// and the queue table which updates via HTMX polling.
templ Dashboard(items []*download.Item) {
    <!DOCTYPE html>
    <html lang="en">
        <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>VideoFetch Dashboard</title>
            <script src="https://unpkg.com/htmx.org@1.9.12" integrity="sha384-ujb1lZYygJmzgSwoxRggbCHcjc0rB2XoQrxeTUQyRjrOnlCoYta87iKBWq3EsdM2" crossorigin="anonymous"></script>
            <style>
                :root { color-scheme: light dark; }
                body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, sans-serif; margin: 1rem auto; max-width: 1100px; padding: 0 1rem; }
                h1 { font-size: 1.6rem; margin: 0 0 1rem 0; }
                form { display: flex; gap: 8px; margin-bottom: 1rem; }
                input[type="url"] { flex: 1; padding: 8px; border: 1px solid #d1d5db; border-radius: 6px; }
                button { padding: 8px 12px; background: #4f46e5; color: white; border: none; border-radius: 6px; cursor: pointer; }
                button:hover { background: #4338ca; }
                table { width: 100%; border-collapse: collapse; }
                th, td { text-align: left; padding: 8px; border-bottom: 1px solid #e5e7eb; vertical-align: middle; }
                tr:hover { background: #f9fafb; }
                .mono { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; }
                .progress { width: 220px; height: 8px; background: #e5e7eb; border-radius: 9999px; overflow: hidden; display: inline-block; vertical-align: middle; }
                .bar { height: 100%; background: #4f46e5; }
                .pct { display: inline-block; width: 44px; text-align: right; font-size: 12px; color: #6b7280; margin-left: 6px; }
                .badge { display: inline-block; padding: 2px 8px; border-radius: 9999px; font-size: 12px; }
                .queued { background: #e5e7eb; color: #111827; }
                .downloading { background: #dbeafe; color: #1e3a8a; }
                .completed { background: #dcfce7; color: #166534; }
                .failed { background: #fee2e2; color: #991b1b; }
                .err { color: #b91c1c; font-size: 12px; max-width: 420px; display: inline-block; }
                @media (prefers-color-scheme: dark) {
                    tr:hover { background: #111827; }
                    .progress { background: #374151; }
                }
            </style>
        </head>
        <body>
            <h1>VideoFetch Dashboard</h1>
            <form method="post" action="/dashboard/enqueue">
                <input type="url" name="url" placeholder="https://example.com/video" required />
                <button type="submit">Enqueue</button>
            </form>
            <div id="queue" hx-get="/dashboard/rows" hx-trigger="load, every 2s" hx-target="#queue" hx-swap="innerHTML">
                @QueueTable(items)
            </div>
        </body>
    </html>
}

// QueueTable renders a full table from the items.
templ QueueTable(items []*download.Item) {
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>URL</th>
                <th>Status</th>
                <th>Progress</th>
                <th>Error</th>
            </tr>
        </thead>
        <tbody id="queue-table-body">
            @QueueRows(items)
        </tbody>
    </table>
}

// QueueRows renders the table rows only; used by HTMX polling endpoint.
templ QueueRows(items []*download.Item) {
    for _, it := range items {
        <tr>
            <td class="mono">{ ShortID(it.ID) }</td>
            <td><a href={ it.URL } target="_blank" rel="noreferrer">{ it.URL }</a></td>
            <td>
                if it.State == download.StateQueued {
                    <span class="badge queued">queued</span>
                } else if it.State == download.StateDownloading {
                    <span class="badge downloading">downloading</span>
                } else if it.State == download.StateCompleted {
                    <span class="badge completed">completed</span>
                } else if it.State == download.StateFailed {
                    <span class="badge failed">failed</span>
                }
            </td>
            <td>
                <div class="progress"><div class="bar" style={ "width:" + fmt.Sprintf("%.0f", it.Progress) + "%" }></div></div>
                <span class="pct">{ fmt.Sprintf("%.0f%%", it.Progress) }</span>
            </td>
            <td>
                if it.Error != "" {
                    <span class="err">{ it.Error }</span>
                }
            </td>
        </tr>
    }
}
